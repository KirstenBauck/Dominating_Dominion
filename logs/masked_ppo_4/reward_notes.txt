    def _calculate_reward(self, terminated):
        """Calculate the reward function for agent"""
        reward = 0

        # Calculate victory points gained from buying card
        bought = self.game.current_player.stats['bought']
        victory_points_gained = (
            bought.count('Province') * 6 +
            bought.count('Duchy') * 3 +
            bought.count('Estate') * 1 -
            bought.count('Curse') * 1
        )

        # Rewards for termination
        if terminated:
            # Rewards for if agent won
            final_score = self.game.current_player.get_score()
            n_turns = self.game.current_player.turn_number
            win_reward = 25

            if self._who_won():
                reward += ((victory_points_gained + win_reward) + (final_score*10) - (n_turns*2))
            else:
                reward += ((victory_points_gained - win_reward) + (final_score*10) - (n_turns*2))

        # Otherwise incrimental rewards
        else:
            # Reward victory points bought during turn
            reward += victory_points_gained

            # Encourage increasing buying power
            total_coppers = self.count_card_type("Copper")
            total_silvers = self.count_card_type("Silver")
            total_golds = self.count_card_type("Gold")
            reward += total_silvers
            reward += total_golds * 1.4

            # A slight penalty for too many coppers (deck clog)
            reward -= max(0, total_coppers - 7) * 0.1

            # Reward using up actions and buys by end of turn
            if self.game.current_player.phase == Phase.NONE:
                self.debug_output("Rewarding player at end of turn for used buys/actions")
                # Reward using buys
                reward += self.game.current_player._used_buys * 1
                # Reward using actions
                reward += self.game.current_player._used_actions * 1

        return reward


################## ENDING TURN HAND ######################
Copper=19
Silver=20
Gold=1
Cellar=5
Remodel=3
Village=1
Throne Room=1
Moat=2
Estate=7
Duchy=1

Total points: 10
Number of turns: ~69
Game Over: Cellar, Estate, Silver piles are empty

NOTES: 
 - Sometimes just reaches term limit of 75 ~50%
 - Seems to prefer lots of silver and copper, they end up being large majority of cards (~60%)

 - Entropy Loss graph and loss graph aren't the best, very "random-noise" esique
 - Mean Episode length stablizes around 40,000 timesteps as well as mean episode reward
 - Policy Gradient Loss & Approximate KL Divergence Graph looks good
##########################################################