If no provinces bought after 30 turns, ended the game

def _calculate_reward(self, terminated):
    reward = 0

    # Game end reward
    if terminated:
        # Win/loss with significant weight
        reward += 50 if self._who_won() else -50

        # Final score relative to opponents
        player_score = self.game.current_player.get_score()
        opponent_scores = [p.get_score() for p in self.game.player_list() if p != self.game.current_player]
        avg_opponent_score = sum(opponent_scores) / len(opponent_scores) if opponent_scores else 0
        score_difference = player_score - avg_opponent_score
        reward += score_difference * 2  # Reward score advantage more heavily

        return reward

    # In-game rewards
    current_player = self.game.current_player

    # Reward engine building more explicitly
    if hasattr(current_player, 'last_bought'):
        last_card = current_player.last_bought

        # Strategic action cards (incentivize engine building)
        if last_card in ["Village", "Market", "Smithy"]:
            reward += 0.4  # Higher reward for key engine components
        elif last_card == "Throne Room":
            reward += 0.5  # High value for combo enablers

        # VP cards with diminishing returns based on timing
        if last_card == "Province":
            # Provinces more valuable later in game
            turn_factor = min(1.0, current_player.turn_number / 15)
            reward += 0.6 + (turn_factor * 0.4)
        elif last_card == "Duchy":
            # Duchies valuable in mid-to-late game
            mid_game_factor = min(1.0, current_player.turn_number / 12)
            reward += 0.2 + (mid_game_factor * 0.3)

################## ENDING TURN HAND ######################
Moat=6
Copper=8
Remodel=5
Estate=3
Cellar=4

Total points: 3
Number of turns: ~18
Game Over: Cellar, Moat, Remodel piles are empty
##########################################################
